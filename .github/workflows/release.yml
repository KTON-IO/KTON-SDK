name: Release and Publish

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags (e.g., v1.0.0)

permissions:
  contents: write
  packages: write

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run checks
        run: |
          npm run typecheck
          npm run lint
          npm run format:check

      - name: Run tests
        run: npm test -- --run

      - name: Build project
        run: npm run build

      - name: Upload build artifact
        if: matrix.node-version == '20.x'  # Only upload artifacts once
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist

  create-release:
    needs: test-and-build
    runs-on: ubuntu-latest
    outputs:
      release-id: ${{ steps.create_release.outputs.id }}
      upload-url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full git history for changelog generation

      - name: Generate changelog
        id: changelog
        run: |
          # Get previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          # Generate simple changelog
          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG="## Changes since $PREVIOUS_TAG"$'\n'"$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)"
          else
            CHANGELOG="## Initial Release"$'\n'"$(git log --pretty=format:"- %s (%h)" --max-count=10)"
          fi
          
          # Escape newlines and set as single-line output
          CHANGELOG_ESCAPED=$(echo "$CHANGELOG" | sed ':a;N;$!ba;s/\n/\\n/g')
          echo "changelog=$CHANGELOG_ESCAPED" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ${{ steps.changelog.outputs.changelog }}
            
            ## Installation
            ```bash
            npm install kton-sdk@${{ github.ref_name }}
            ```
            
            ## Assets
            - Source code (zip)
            - Source code (tar.gz)
            - Built distribution files (attached below)
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}  # Versions with hyphens are pre-releases

  publish-npm:
    needs: [test-and-build, create-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Verify package version matches tag
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          
          if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
            echo "Error: Package version ($PACKAGE_VERSION) doesn't match tag version ($TAG_VERSION)"
            exit 1
          fi

      - name: Publish to NPM
        run: |
          if [[ ${{ github.ref_name }} == *"-"* ]]; then
            # Pre-release versions (e.g., v1.0.0-beta.1)
            npm publish --tag beta
          else
            # Stable versions
            npm publish
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  upload-assets:
    needs: [test-and-build, create-release]
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Create distribution archive
        run: |
          tar -czf kton-sdk-${{ github.ref_name }}-dist.tar.gz -C dist .
          zip -r kton-sdk-${{ github.ref_name }}-dist.zip dist/

      - name: Upload distribution archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload-url }}
          asset_path: ./kton-sdk-${{ github.ref_name }}-dist.tar.gz
          asset_name: kton-sdk-${{ github.ref_name }}-dist.tar.gz
          asset_content_type: application/gzip

      - name: Upload distribution zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload-url }}
          asset_path: ./kton-sdk-${{ github.ref_name }}-dist.zip
          asset_name: kton-sdk-${{ github.ref_name }}-dist.zip
          asset_content_type: application/zip

  post-release:
    needs: [create-release, publish-npm, upload-assets]
    runs-on: ubuntu-latest
    steps:
      - name: Update release with NPM link
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: release } = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release-id }}
            });
            
            const updatedBody = release.body + '\n\nðŸ“¦ **Published to NPM**: https://www.npmjs.com/package/kton-sdk/v/' + '${{ github.ref_name }}'.replace('v', '');
            
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release-id }},
              body: updatedBody
            });